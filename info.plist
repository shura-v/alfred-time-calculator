<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.shuravlasov.time-calculator</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>A9F2B54F-7805-4172-8BFA-61AF06343DDD</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EE85E83F-6D28-46B6-9322-252EF5CC7359</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D532CFC0-EE6B-47C6-85D8-24CD3EA1302B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A9F2B54F-7805-4172-8BFA-61AF06343DDD</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Shura Vlasov</string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Time calculator</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>17</integer>
				<key>hotmod</key>
				<integer>1441792</integer>
				<key>hotstring</key>
				<string>T</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>D532CFC0-EE6B-47C6-85D8-24CD3EA1302B</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>{var:keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>var module = {};
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) =&gt; function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) =&gt; {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) =&gt; {
  if (from &amp;&amp; typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) &amp;&amp; key !== except)
        __defProp(to, key, { get: () =&gt; from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) =&gt; (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) =&gt; __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" &amp;&amp; val.length &gt; 0) {
        return parse(val);
      } else if (type === "number" &amp;&amp; isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length &gt; 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs &gt;= d) {
        return Math.round(ms2 / d) + "d";
      }
      if (msAbs &gt;= h) {
        return Math.round(ms2 / h) + "h";
      }
      if (msAbs &gt;= m) {
        return Math.round(ms2 / m) + "m";
      }
      if (msAbs &gt;= s) {
        return Math.round(ms2 / s) + "s";
      }
      return ms2 + "ms";
    }
    function fmtLong(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs &gt;= d) {
        return plural(ms2, msAbs, d, "day");
      }
      if (msAbs &gt;= h) {
        return plural(ms2, msAbs, h, "hour");
      }
      if (msAbs &gt;= m) {
        return plural(ms2, msAbs, m, "minute");
      }
      if (msAbs &gt;= s) {
        return plural(ms2, msAbs, s, "second");
      }
      return ms2 + " ms";
    }
    function plural(ms2, msAbs, n, name) {
      var isPlural = msAbs &gt;= n * 1.5;
      return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// index.js
var index_exports = {};
__export(index_exports, {
  testRun: () =&gt; testRun
});
module.exports = __toCommonJS(index_exports);
var import_ms = __toESM(require_ms(), 1);
var formatSeconds = (number_) =&gt; new Intl.NumberFormat("en-US", {
  minimumFractionDigits: 0,
  maximumFractionDigits: 3
}).format(number_);
function humanizeDuration(seconds) {
  if (Number.isNaN(seconds)) {
    throw new TypeError("second argument must be a number");
  }
  const d = Math.floor(seconds / 86400);
  const h = Math.floor(seconds % 86400 / 3600);
  const m = Math.floor(seconds % 3600 / 60);
  const s = seconds % 60;
  return [
    d &gt; 0 ? `${d} day${d &gt; 1 ? "s" : ""}` : "",
    h &gt; 0 ? `${h} hour${h &gt; 1 ? "s" : ""}` : "",
    m &gt; 0 ? `${m} minute${m &gt; 1 ? "s" : ""}` : "",
    s === 0 ? "" : `${formatSeconds(s)} second${s &gt; 1 ? "s" : ""}`
  ].filter(Boolean).join(", ");
}
function calculate(value) {
  const expression = value.replaceAll(/(\d+\.?\d*[a-zA-Z]+)/g, (match) =&gt; {
    const milliseconds = (0, import_ms.default)(match.trim());
    return Number.isNaN(milliseconds) ? match : milliseconds / 1e3;
  });
  try {
    const totalSeconds = eval(expression);
    return humanizeDuration(totalSeconds);
  } catch {
    return null;
  }
}
function toJSON(result) {
  return JSON.stringify({
    items: result === null ? [{ title: "Invalid input", subtitle: 'Try something like "1h + 30m"' }] : [{ title: result, subtitle: "Press Enter to copy", arg: result }]
  });
}
function run() {
  const query = "{query}";
  const result = calculate(query);
  return toJSON(result);
}
function testRun(query) {
  const result = calculate(query);
  return toJSON(result);
}
// Annotate the CommonJS export names for ESM import in node:
0 &amp;&amp; (module.exports = {
  testRun
});
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Update available: 0.0.2 → 0.0.4. Run `npm install -g alfred-time-calculator`</string>
				<key>title</key>
				<string>Calculate time</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>A9F2B54F-7805-4172-8BFA-61AF06343DDD</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>transient</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>EE85E83F-6D28-46B6-9322-252EF5CC7359</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>### 🕒 **Time Calculator Workflow for Alfred**

This Alfred workflow allows you to **convert time expressions** like `"1h + 30m"` into **human-readable durations**.

---

## **⚡ Features**
- Convert expressions like `1h + 30m - 5s / 2`
- Supports **days, hours, minutes, seconds, and milliseconds**
- Uses `eval()` to allow advanced calculations
- Returns **formatted duration** in natural language (`1 hour, 30 minutes`)
- Works with **Alfred's Script Filter** (`Keyword: tc`)

---

## **🚀 How to Use**
1. **Trigger Alfred** (`⌘ Space`)
2. **Type:** `tc 2h + 45m - 10s`
3. **Result:** `"2 hours, 44 minutes, 50 seconds"`
4. **Press Enter** → **Copies result to clipboard**

---

## **🛠 Supported Time Units**
| Unit | Example | Converted Value |
|------|--------|----------------|
| Days | `2d` | `172800 seconds` |
| Hours | `3h` | `10800 seconds` |
| Minutes | `30m` | `1800 seconds` |
| Seconds | `45s` | `45 seconds` |
| Milliseconds | `500ms` | `0.5 seconds` |

- Expressions can be **combined** (`1h + 30m - 5s / 2`)
- Works with **multiplication and division** (`2d * 3`, `1h / 2`)

---

## **🛠 Installation &amp; Setup**
1. **Download the Workflow** (`Time Calculator.alfredworkflow`)
2. Open it in **Alfred Preferences → Workflows**
3. Set the **keyword** to `"tc"` (already pre-configured)
4. You're ready to go! 🚀

---

## **💻 How It Works (Technical)**
- **Parses time units using `ms` module**
- **Replaces time expressions with seconds**
- **Uses `eval()`** to calculate final value
- **Formats output** using `Intl.NumberFormat`
- **Returns JSON** to Alfred (`Script Filter`)

---

## **⚡ Example Queries &amp; Outputs**
| Input | Output                     |
|-------|----------------------------|
| `tc 1h + 30m` | `"1 hour, 30 minutes"`     |
| `tc 20d * 2` | `"40 days"`                |
| `tc 5m / 2` | `"2 minutes, 30 seconds"`  |
| `tc 1h - 5s` | `"59 minutes, 55 seconds"` |
| `tc 300ms * 4` | `"1.2 seconds"`            |

---

## **👨‍💻 Author &amp; Support**
- **Created by:** Shura Vlasov
- **GitHub:** *https://github.com/shura-v*

🚀 **Enjoy faster time calculations in Alfred!**</string>
	<key>uidata</key>
	<dict>
		<key>A9F2B54F-7805-4172-8BFA-61AF06343DDD</key>
		<dict>
			<key>xpos</key>
			<real>230</real>
			<key>ypos</key>
			<real>105</real>
		</dict>
		<key>D532CFC0-EE6B-47C6-85D8-24CD3EA1302B</key>
		<dict>
			<key>xpos</key>
			<real>65</real>
			<key>ypos</key>
			<real>105</real>
		</dict>
		<key>EE85E83F-6D28-46B6-9322-252EF5CC7359</key>
		<dict>
			<key>xpos</key>
			<real>390</real>
			<key>ypos</key>
			<real>105</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>tc</string>
				<key>placeholder</key>
				<string>tc</string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>Choose a different keyword if "tc" is unavailable</string>
			<key>label</key>
			<string>Workflow keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>keyword</string>
		</dict>
	</array>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/shura-v/alfred-time-calculator</string>
</dict>
</plist>
